#include <iostream>
using namespace std;

// 불리언(bool)과 실수

// 불리언(boolean) 참/거짓
bool isHighLevel = true;
bool isPlayer = true;
bool isMale = false;

// 사실 bool은 그냥 1바이트 정수에 불과
// 왜 정수 시간에 안 다뤘을까?
// -> 어셈블리에서 bool이라는 것은 없음
// bool만 봐도 참/거짓 둘 중 하나라는 힌트를 준다.(가독성)


// 실수(부동소수점)
// float double
// 3.14
// 실수는 기본적으로 double로 잡힌다. float으로 쓰려면 실수끝에 f를 붙여주면 된다.
// 소수점 앞/뒤를 기준으로 16/16씩 끊는다면?
// (0~65535) . (0~65535) 가 되므로 3.1415926535와 같은 숫자를 표현하지 못한다. 고로 좋은 방법이 아니다.


float attackSpeed = -3.375f;
double attackSpeed2 = 123.4123;


// 부동(不動 X)(浮動 O) 소수점
// 소수점을 유동적으로 움직여서 표현하는 방법

// 3.1415926535
// 3.1415926535 = 0.31415926535 * 10 = 314.15926535 * 10^-2
// 1) 정규화 : 양식을 맞춰 정하는것
// ex) 10진수 기준 = 0.31415926535 * 10
// 2) 31415926535 (유효숫자) 1 (지수)

// float 부호(1) 지수(8) 유효숫자(23) = 32비트 = 4바이트
// double 부호(1) 지수(11) 유효숫자(52) = 64비트 = 8바이트

// ex) -3.375라는 값을 저장
// 1) 2진수로 변환 = 3 + 0.375 = 0b11 + 0b0.011 = 0b11.011
// 0.375 = 0.5 * 0 + 0.25 * 1 + 0.125 * 1 = 0b0.011
// 2) 정규화 0b11.011 = 0b1.1011 * 2^1
// 1(부호) 1(지수) 1011(유효숫자)
// 단 지수는 unsigned byte라고 가정하고 숫자 + 127 을 해준다.
// 예상 결과 (float) : 0b 1 10000000 10110000000000000000000

// 프로그래밍할 때 부동소수점은 항상 '근사값'이라는 것을 기억하자.
// 특히 수가 커질수록 오차범위도 매우 커진다.
// 실수 2개를 == 으로 비교하는 것은 지양하자.

int main()
{

}