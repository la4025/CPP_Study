#include <iostream>
using namespace std;

// 데이터 연산 유의사항

// 1) 변수의 유효범위

// 전역변수
int hp = 100;

// 스택 내부의 변수
// { } 중괄호의 범위가 생존 범위이다.
// 같은 이름을 두번 사용할 때 문제가 발생한다.

// 전역변수와 지역변수가 같은 이름일 경우 지역변수가 우선수위에 있다.


// 2) 연산의 우선순위
// 연산자 사이에도 우선순위가 존재한다.
// ( ) 소괄호를 이용하여 우선순위를 강제로 구분할 수 있다.

// 3) 타입 변환
// 쉽게 말해 바구니를 교체 하는 과정이다.
// 큰 데이터 타입을 작은 데이터 타입으로 변환할 때, 작은 데이터 타입 외의 데이터는 모두 소멸한다.
// 데이터의 손실이 일어날 수 있으므로 위험도가 높은 작업이다.

// 4) 사칙연산 관련
// 곱셈 : 오버플로우 조심 
// 데이터 타입의 한계를 넘어설 경우, 전혀 다른 값이 나온다.
// 나눗셈 : 0 나누기 조심 
// 0으로 나누게 될 경우 계산이 성립되지 않으므로, 프로그램이 충돌이 난다.
//실수를 정수로 변환하여 계산을 하려는 경우 (0.123 -> 0) 유의하자. (형식에 대해 주의하자)



int main()
{
	// 1) 변수의 유효범위 예
	// 지역변수
	int hp = 20;
	cout << hp << endl;

	// 2) 연산의 우선순위 예
	bool isEven = (hp % 2 == 0);
	bool isEvenOrDivBy3 = (hp % 2 == 0 || hp % 3 == 0);
	// 연산이 길어질수록 우선순위에 따라 결과가 원하지 않는 값이 나오기도 한다.
	// 그러한 사고를 방지하기 위해서 ( ) 소괄호를 이용하여 우선순위를 구분지어 확실히 해놓자.

	// 3) 타입변환 예
	short hp2 = hp; // 윗쪽 비트 데이터가 짤린다.
	float hp3 = hp; // 실수로 변환할 때, 정밀도 차이가 있기 때문에 데이터 손실이 있다.
	unsigned int hp4 = hp;// 비트 단위로 보면 똑같으나, 분석하는 방법이 달라져 차이가 난다.
}